
const { MAVEN_ARCHETYPE_VERSION, OPTION_JAVA_MVN, OPTION_JAVA_PACKAGE, REGEX_JAVA_PACKAGE } = require('../constants');


class MvnArchetypeUtil {

    _scanMvnParams(mvnParams, params) {
        const values = mvnParams.split(',');
        for (const entry of values) {
            const tupel = entry.split('=');
            tupel[0] = tupel[0].trim();
            tupel[1] = tupel[1].trim();
            const key = (tupel[0].startsWith('-D') ? tupel[0] : `-D${tupel[0]}`);
            params.set(key, tupel[1]);
        }
    }

    getCmdArgs(projectName, options) {
        const params = new Map();

        params.set(`archetype:generate`);
        params.set(`-DarchetypeArtifactId`, `cds-services-archetype`);
        params.set(`-DarchetypeGroupId`, `com.sap.cds`);
        params.set(`-DarchetypeVersion`, MAVEN_ARCHETYPE_VERSION);
        params.set(`-DartifactId`, projectName);
        params.set(`-DincludeModel`, true);
        params.set(`-DgroupId`, `customer`);

        if (options[OPTION_JAVA_PACKAGE]) {
            params.set(`-Dpackage`, options[OPTION_JAVA_PACKAGE]);
        }

        if (options[OPTION_JAVA_MVN]) {
            this._scanMvnParams(options[OPTION_JAVA_MVN], params);
        }

        // `-DcdsVersion=3.0.0`,
        // `-DincludeModel=false`,
        params.set(`-Dstyle.color`, `always`);

        params.set('-B');

        if (process.env.DEBUG) {
            params.set('-X');
        }

        if (!options.force) {
            const finalPackage = params.get('-Dpackage');
            if (finalPackage) {
                if (!finalPackage.match(REGEX_JAVA_PACKAGE)) {
                    throw new Error(`Package '${finalPackage}' is an invalid Java package. Use --force to use anyway.`);
                }
            } else {
                const artifactId = params.get('-DartifactId');
                if (!artifactId.match(REGEX_JAVA_PACKAGE)) {
                    throw new Error(`ArtifactId '${artifactId}' is an invalid Java package. Use --force to use anyway.`);
                }
            }
        }

        return Array.from(params, (e) => {
            let result = e[0];
            if (e[1]) {
                result = result + `=${e[1]}`;
            }
            return result;
        });
    }
}

module.exports = new MvnArchetypeUtil();
